name: Rust
on:
  pull_request:
    paths:
      - .github/workflows/rust.yaml
      - Makefile
      - "*.toml"
      - ci/**
      - ibc/**
      - ibc-core/**
      - ibc-apps/**
      - ibc-data-types/**
      - ibc-clients/**
      - ibc-primitives/**
      - ibc-query/**
      - ibc-testkit/**
      - ibc-derive/**
      - tests-integration/**
  push:
    tags:
      - v[0-9]+.*
    branches:
      - "release/*"
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main' }}

env:
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 1
  CARGO_PROFILE_RELEASE_DEBUG: 1
  RUST_BACKTRACE: short
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

jobs:
  check-lints:
    name: Check Lints
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      RIPGREP_VERSION: 14.1.0
      FD_VERSION: 9.0.0
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust nightly toolchain with rustfmt
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
      - name: Install Rust stable toolchain with clippy
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Taplo
        uses: baptiste0928/cargo-install@v3
        with:
          crate: taplo-cli
      - name: Run Lint Checks (fmt, clippy, taplo)
        run: make lint
      - name: Spell Check with Typos
        uses: crate-ci/typos@master
        with:
          config: ./.github/typos.toml

  check-docs:
    name: Check Documentations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rust-docs
      - name: Run cargo docs
        run: make check-docs

  check-features:
    name: Check Features
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - name: Run cargo hack
        run: make check-features

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - name: Run cargo test
        run: make test

  rust-version:
    name: Check Rust version for `ibc` libraries
    timeout-minutes: 30
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack,cargo-binstall,cargo-nextest

      - name: Install cargo-msrv
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo binstall --no-confirm cargo-msrv

      - name: Verify and Test Rust version
        run: |
          cargo hack msrv verify --output-format=minimal --all-features
          cargo hack --rust-version nextest run --all-targets --all-features --no-tests=pass

      - name: Find MSRV
        if: ${{ failure() }}
        run: cargo hack msrv find --min=1.75 --output-format=minimal --all-features
