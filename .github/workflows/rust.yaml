name: Rust
on:
  pull_request:
    paths:
      - .github/workflows/rust.yaml
      - Makefile
      - '*.toml'
      - ci/**
      - ibc/**
      - ibc-core/**
      - ibc-apps/**
      - ibc-data-types/**
      - ibc-clients/**
      - ibc-primitives/**
      - ibc-query/**
      - ibc-testkit/**
      - ibc-derive/**
      - tests-integration/**
  push:
    tags:
      - v[0-9]+.*
    branches:
      - "release/*"
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main' }}

env:
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 1
  CARGO_PROFILE_RELEASE_DEBUG: 1
  RUST_BACKTRACE: short
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

jobs:
  check-lints:
    name: Check Lints
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      RIPGREP_VERSION: 14.1.0
      FD_VERSION: 9.0.0
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust nightly toolchain with rustfmt
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
      - name: Install Rust stable toolchain with clippy
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Taplo
        uses: baptiste0928/cargo-install@v3
        with:
          crate: taplo-cli
      - name: Run Lint Checks (fmt, clippy, taplo)
        run: make lint
      - name: Spell Check with Typos
        uses: crate-ci/typos@master
        with:
          config: ./.github/typos.toml

  check-docs:
    name: Check Documentations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rust-docs
      - name: Run cargo docs
        run: make check-docs

  check-features:
    name: Check Features
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - name: Run cargo hack
        run: make check-features

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - name: Run cargo test
        run: make test

  test-msrv:
    name: Test MSRV for `ibc` libraries
    timeout-minutes: 30
    env:
      CARGO_MSRV_VERSION: 0.16.0-beta.23
      MSRV: 1.72.1
    strategy:
      matrix:
        param:
          [
            { os: ubuntu-latest, system: unknown-linux-gnu },
            { os: macos-latest, system: apple-darwin },
          ]
    runs-on: ${{ matrix.param.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Download cargo-msrv
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: foresterre/cargo-msrv
          version: "tags/v${{ env.CARGO_MSRV_VERSION }}"
          file: "cargo-msrv-x86_64-${{ matrix.param.system }}-v${{ env.CARGO_MSRV_VERSION }}.tgz"

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.MSRV }}

      - name: Install cargo-msrv
        run: |
          tar -xzf "cargo-msrv-x86_64-${{ matrix.param.system }}-v${{ env.CARGO_MSRV_VERSION }}.tgz"
          mv "cargo-msrv-x86_64-${{ matrix.param.system }}-v${{ env.CARGO_MSRV_VERSION }}/cargo-msrv" ~/.cargo/bin
          cargo msrv --version

      - name: Calculate MSRV
        run: cargo msrv --output-format minimal --min 1.68.0

      - name: Build with MSRV
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ env.MSRV }}
          command: build
          args: --all-features
